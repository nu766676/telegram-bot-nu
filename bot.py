import os
import gdown
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.error import TimedOut

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("TOKEN")

# –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –Ω–∞ Google –î–∏—Å–∫–µ
FILE_URLS = {
    "smile_pic.jpg": "https://drive.google.com/uc?id=1vH_McsvkRbUU5LWY307NO0pB-cAF_Ble",
    "help_pic.jpg": "https://drive.google.com/uc?id=1isSktQGhQxmvydIwpGJ8K_8oRGMK-0vB",
    "about_pic.jpg": "https://drive.google.com/uc?id=18ac1Lxs0YdFF0Jg-Zl1XRc4_AARRyP7C",
    "bron_pic.jpg": "https://drive.google.com/uc?id=1TrH4GCkFVAwEzf_vJ5FcqjlmrMxIl_u3",
    "bonus_pic.jpg": "https://drive.google.com/uc?id=1o-x6e2meNsmQyKIQGUEUsO1RtC4spTSC",
    "anketa_pic.jpg": "https://drive.google.com/uc?id=12lx9dDl7WuaG1he6GDWAdENLvUGyiCBO",
    "menu.pdf": "https://drive.google.com/uc?id=1xOz_D8Su0rBVeP5w_c1XeioqEHFdnmNe",
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
async def download_file_if_needed(filename, url):
    if not os.path.exists(filename):
        gdown.download(url, filename, quiet=True)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏
NAME = range(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await download_file_if_needed('smile_pic.jpg', FILE_URLS["smile_pic.jpg"])

    with open('smile_pic.jpg', 'rb') as photo:
        await update.message.reply_photo(photo=photo, caption="–ü—Ä–∏–≤–µ—Ç! üëã –Ø —á–∞—Ç-–±–æ—Ç ¬´–ù–µ –£—Å–ª–æ–∂–Ω—è–π¬ª. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.text
    context.user_data['name'] = user_name
    await show_main_menu(update, context)
    return -1

async def show_main_menu(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    await download_file_if_needed('help_pic.jpg', FILE_URLS["help_pic.jpg"])

    keyboard = [
        [InlineKeyboardButton("–û –Ω–∞—Å ‚ú¥Ô∏è", callback_data='about'), InlineKeyboardButton("–ú–µ–Ω—é üìã", callback_data='menu')],
        [InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª üìû", callback_data='book')],
        [InlineKeyboardButton("–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üí∞üéÅ", callback_data='bonus')],
        [InlineKeyboardButton("–ü–æ–º–æ–≥–∏ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ üôè", callback_data='feedback')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    with open('help_pic.jpg', 'rb') as photo:
        caption = f"{context.user_data.get('name', '–î—Ä—É–≥')}, —è –º–æ–≥—É –±—ã—Ç—å –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã–º! –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üòâ"
        if isinstance(update_or_query, Update):
            await update_or_query.message.reply_photo(photo=photo, caption=caption, reply_markup=reply_markup)
        else:
            await update_or_query.message.reply_photo(photo=photo, caption=caption, reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == 'about':
        await download_file_if_needed('about_pic.jpg', FILE_URLS["about_pic.jpg"])
        keyboard = [
            [InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã üó∫Ô∏è", url="https://yandex.ru/maps/-/CHFWQPPa")],
            [InlineKeyboardButton("2–ì–ò–° –ö–∞—Ä—Ç—ã üèôÔ∏è", url="https://2gis.ru/irkutsk/geo/70000001039853425")],
            [InlineKeyboardButton("Instagram üì∏", url="https://www.instagram.com/nu_irk1?igsh=MW15OWU5NGJ6ZDVnMw==")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='back')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        with open('about_pic.jpg', 'rb') as photo:
            await query.message.reply_photo(
                photo=photo,
                caption="–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —É—é—Ç–Ω–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏! üåü –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏ –∏ –æ—Å—Ç–∞–≤–ª—è–π –æ—Ç–∑—ã–≤—ã! üí¨",
                reply_markup=reply_markup
            )

    elif data == 'book':
        keyboard = [
            [InlineKeyboardButton("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä üìã", callback_data='copy_number')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='back')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            text="–î–ª—è –±—Ä–æ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ: +79148985744",
            reply_markup=reply_markup
        )

    elif data == 'copy_number':
        await query.message.reply_text("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä: +79148985744")

    elif data == 'menu':
        keyboard = [
            [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ üåê", url=FILE_URLS["menu.pdf"])],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='back')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é:", reply_markup=reply_markup)

    elif data == 'bonus':
        await download_file_if_needed('bonus_pic.jpg', FILE_URLS["bonus_pic.jpg"])
        keyboard = [
            [InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ–Ω—É—Å–Ω–æ–π –∫–∞—Ä—Ç—ã üìù", url="https://iiko.biz/L/075535")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='back')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        with open('bonus_pic.jpg', 'rb') as photo:
            await query.message.reply_photo(
                photo=photo,
                caption="–ë–æ–Ω—É—Å—ã: üéÅ 15% —Å–∫–∏–¥–∫–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞–º, 5% –∫—ç—à–±–µ–∫, 600 –±–æ–Ω—É—Å–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, 150 –∑–∞ –∞–Ω–∫–µ—Ç—É!",
                reply_markup=reply_markup
            )

    elif data == 'feedback':
        await download_file_if_needed('anketa_pic.jpg', FILE_URLS["anketa_pic.jpg"])
        keyboard = [
            [InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üìù", url="https://docs.google.com/forms/d/e/1FAIpQLSeiTU3ouHFEyhRMCRh_cpVpD_Dn5laaLdtFzP8Nx8uni8c1Rw/viewform")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='back')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        with open('anketa_pic.jpg', 'rb') as photo:
            await query.message.reply_photo(
                photo=photo,
                caption="–ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã! üí∞",
                reply_markup=reply_markup
            )

    elif data == 'back':
        await show_main_menu(query, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, get_name))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_error_handler(error_handler)

    app.run_polling()

if __name__ == "__main__":
    main()
