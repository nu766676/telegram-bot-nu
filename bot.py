import os
import asyncio
import logging
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ.get("TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 10000))

RAW_BASE = "https://raw.githubusercontent.com/nu766676/telegram-bot-nu/main"
FILE_URLS = {
    "smile": f"{RAW_BASE}/smile_pic.jpg",
    "help": f"{RAW_BASE}/help_pic.jpg",
    "about": f"{RAW_BASE}/about_pic.jpg",
    "bron": f"{RAW_BASE}/bron_pic.jpg",
    "bonus": f"{RAW_BASE}/bonus_pic.jpg",
    "anketa": f"{RAW_BASE}/anketa_pic.jpg",
    "menu": f"{RAW_BASE}/menu.pdf",
}

# Flask
app = Flask(__name__)
telegram_app = Application.builder().token(TOKEN).build()
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

NAME = range(1)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_photo(
        photo=FILE_URLS["smile"],
        caption="–ü—Ä–∏–≤–µ—Ç! üëã –Ø —á–∞—Ç-–±–æ—Ç ¬´–ù–µ –£—Å–ª–æ–∂–Ω—è–π¬ª. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    )
    return NAME

# –ò–º—è
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await show_main_menu(update, context)
    return -1

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–û –Ω–∞—Å ‚ú¥Ô∏è", callback_data='about'),
         InlineKeyboardButton("–ú–µ–Ω—é üìã", callback_data='menu')],
        [InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª üìû", callback_data='book')],
        [InlineKeyboardButton("–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üí∞üéÅ", callback_data='bonus')],
        [InlineKeyboardButton("–ü–æ–º–æ–≥–∏ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ üôè", callback_data='feedback')],
    ]
    markup = InlineKeyboardMarkup(keyboard)
    caption = f"{context.user_data.get('name', '–î—Ä—É–≥')}, —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º! –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üòâ"

    if isinstance(update_or_query, Update):
        await update_or_query.message.reply_photo(FILE_URLS["help"], caption=caption, reply_markup=markup)
    else:
        await update_or_query.message.reply_photo(FILE_URLS["help"], caption=caption, reply_markup=markup)

# –ö–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'about':
        kb = [
            [InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã üó∫Ô∏è", url="https://yandex.ru/maps/-/CHFWQPPa")],
            [InlineKeyboardButton("2–ì–ò–° üèôÔ∏è", url="https://2gis.ru/irkutsk/geo/70000001039853425")],
            [InlineKeyboardButton("Instagram üì∏", url="https://www.instagram.com/nu_irk1")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='back')],
        ]
        await query.message.reply_photo(FILE_URLS["about"], caption="–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è! üåü", reply_markup=InlineKeyboardMarkup(kb))

    elif data == 'book':
        await query.message.reply_photo(FILE_URLS["bron"], caption="–î–ª—è –±—Ä–æ–Ω–∏: +79148985744", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='back')]]))

    elif data == 'menu':
        await query.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é üåê", url=FILE_URLS["menu"])],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='back')],
        ]))

    elif data == 'bonus':
        await query.message.reply_photo(FILE_URLS["bonus"], caption="–ë–æ–Ω—É—Å—ã! üéÅ", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É üìù", url="https://iiko.biz/L/075535")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='back')],
        ]))

    elif data == 'feedback':
        await query.message.reply_photo(FILE_URLS["anketa"], caption="–ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å! üí∞", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üìù", url="https://docs.google.com/forms/...")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='back')],
        ]))

    elif data == 'back':
        await show_main_menu(query, context)

# Webhook endpoint
@app.route(f'/{TOKEN}', methods=["POST"])
def webhook():
    try:
        update = Update.de_json(request.get_json(force=True), telegram_app.bot)
        loop.create_task(telegram_app.process_update(update))
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≤ webhook:")
        return "Internal Server Error", 500
    return "OK", 200

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async def startup():
    await telegram_app.initialize()
    await telegram_app.start()
    await telegram_app.bot.set_webhook(f"{WEBHOOK_URL}/{TOKEN}")
    logging.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –•–µ–Ω–¥–ª–µ—Ä—ã
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, get_name))
telegram_app.add_handler(CallbackQueryHandler(button_handler))

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    loop.run_until_complete(startup())
    app.run(host='0.0.0.0', port=PORT)
